(function (require, global) {
require = (function (cache, modules, cx) {
return function (r) {
if (!modules[r]) throw new Error(r + ' is not a module');
return cache[r] ? cache[r].exports : ((cache[r] = {
exports: {}
}, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports)));
};
})({}, {
0: function (require, module, exports) {
var ExitIntent, defaults, extend;
extend = require(1);
defaults = require(2);
ExitIntent = (function () {
function ExitIntent(arg) {
var options, popupOptions;
(this.el = arg.el, this.name = arg.name, options = arg.options, popupOptions = arg.popupOptions);
if (!(this instanceof ExitIntent)) {
return new ExitIntent(arguments[0]);
}
this.options = extend.clone(defaults, options);
this.popup = this.createPopup(popupOptions);
this.name = this.popup.name;
this.disabled = false;
this.isOpen = false;
this.attachOpeningEvents();
this.attachMiscEvents();
ExitIntent.instances[this.name] = this;
}
ExitIntent.prototype.createPopup = function (options) {
var popup;
options = extend({
forceOpen: true
}, options);
popup = new Popup(this.el, this.name, options);
this.name = popup.name;
return popup;
};
extend(ExitIntent.prototype, require(3));
ExitIntent.version = "3.2.3";
ExitIntent.instances = {};
ExitIntent.disableAll = function () {
var instance, n, ref;
ref = ExitIntent.instances;
for (n in ref) {
instance = ref[n];
instance.disabled = true;
}
};
return ExitIntent;
})();
module.exports = ExitIntent;
return module.exports;
},
1: function (require, module, exports) {
var exports, extend, modifiers, newBuilder, normalizeKeys;
extend = require(5);
normalizeKeys = function (keys) {
var i, key, len, output;
if (keys) {
output = {};
if (typeof keys !== 'object') {
output[keys] = true;
} else {
if (!Array.isArray(keys)) {
keys = Object.keys(keys);
}
for ((i = 0, len = keys.length); i < len; i++) {
key = keys[i];
output[key] = true;
}
}
return output;
}
};
newBuilder = function (isBase) {
var builder;
builder = function (target) {
var theTarget;
var $_len = arguments.length, $_i = -1, sources = new Array($_len);
while (++$_i < $_len) sources[$_i] = arguments[$_i];
if (builder.options.target) {
theTarget = builder.options.target;
} else {
theTarget = target;
sources.shift();
}
return extend(builder.options, theTarget, sources);
};
if (isBase) {
builder.isBase = true;
}
builder.options = {};
Object.defineProperties(builder, modifiers);
return builder;
};
modifiers = {
'deep': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
_.options.deep = true;
return _;
}
},
'own': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
_.options.own = true;
return _;
}
},
'allowNull': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
_.options.allowNull = true;
return _;
}
},
'nullDeletes': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
_.options.nullDeletes = true;
return _;
}
},
'concat': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
_.options.concat = true;
return _;
}
},
'clone': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
_.options.target = {};
return _;
}
},
'notDeep': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
return function (keys) {
_.options.notDeep = normalizeKeys(keys);
return _;
};
}
},
'deepOnly': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
return function (keys) {
_.options.deepOnly = normalizeKeys(keys);
return _;
};
}
},
'keys': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
return function (keys) {
_.options.keys = normalizeKeys(keys);
return _;
};
}
},
'notKeys': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
return function (keys) {
_.options.notKeys = normalizeKeys(keys);
return _;
};
}
},
'transform': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
return function (transform) {
if (typeof transform === 'function') {
_.options.globalTransform = transform;
} else if (transform && typeof transform === 'object') {
_.options.transforms = transform;
}
return _;
};
}
},
'filter': {
get: function () {
var _;
_ = this.isBase ? newBuilder() : this;
return function (filter) {
if (typeof filter === 'function') {
_.options.globalFilter = filter;
} else if (filter && typeof filter === 'object') {
_.options.filters = filter;
}
return _;
};
}
}
};
module.exports = exports = newBuilder(true);
exports.version = "1.7.3";
return module.exports;
},
2: function (require, module, exports) {
module.exports = {
threshold: 15,
mouseleaveTrigger: true,
historyTrigger: true
};
return module.exports;
},
3: function (require, module, exports) {
var $, browserInfo;
browserInfo = require(7);
$ = window.jQuery;
var open = exports.open = function open() {
this.popup.open();
this.isOpen = true;
this.disabled = true;
return this.detachOpeningEvents();
};
var close = exports.close = function close() {
this.popup.close();
return this.isOpen = false;
};
var emit = exports.emit = function emit(event) {
this.el.trigger(event);
return this.popup.emit(event);
};
var replaceWith = exports.replaceWith = function replaceWith($newForm) {
this.popup.replaceWith($newForm);
return this.attachMiscEvents();
};
var attachOpeningEvents = exports.attachOpeningEvents = function attachOpeningEvents() {
if (this.options.mouseleaveTrigger) {
this.attachMouseleaveTrigger();
}
if (this.options.historyTrigger) {
return this.attachHistoryTrigger();
}
};
var attachMouseleaveTrigger = exports.attachMouseleaveTrigger = function attachMouseleaveTrigger() {
var base, threshold;
if (!browserInfo.isMobile) {
base = browserInfo.isIE || browserInfo.isIE11 || browserInfo.isEdge ? 110 : 0;
threshold = this.options.threshold + base;
return $(document).on("mouseleave." + this.name, (function (_this) {
return function (event) {
if (_this.disabled || Popup.isOpen || event.relatedTarget) {
return;
}
if (event.clientY <= threshold) {
_this.open();
return _this.emit('mouseopen');
}
};
})(this));
}
};
var attachHistoryTrigger = exports.attachHistoryTrigger = function attachHistoryTrigger() {
var ref;
if (!(browserInfo.isIE || browserInfo.isIE11 || browserInfo.isMobile || this.disabled || this.isOpen || (((ref = window.history) != null ? ref.replaceState : void 0) == null))) {
window.history.replaceState({
id: 'exit-init'
}, '', '');
window.history.pushState({
id: 'exit-control'
}, '', '');
return $(window).on('popstate', (function (_this) {
return function (e) {
if (!_this.disabled && ('state' in window.history) && window.history.state !== null && window.history.state.id !== 'exit-control') {
_this.open();
return _this.emit('historyopen');
} else {
return window.history.back();
}
};
})(this));
}
};
var attachMiscEvents = exports.attachMiscEvents = function attachMiscEvents() {
this.el.find('.no').on("click." + this.name, (function (_this) {
return function () {
_this.close();
try {
return localStorage.setItem('exit_intent-complete', 'true');
} catch (error) {}
};
})(this));
this.el.find('.submit').on("click." + this.name, (function (_this) {
return function () {
return _this.emit('submitted');
};
})(this));
return this.el.find('.step').first().find('.next').on("click." + this.name, (function (_this) {
return function () {
return _this.emit('continued');
};
})(this));
};
var detachEvents = exports.detachEvents = function detachEvents() {
this.el.find('.no').off("click." + this.name);
this.el.find('.submit').off("click." + this.name);
this.el.find('.step').first().find('.next').off("click." + this.name);
return this.detachOpeningEvents();
};
var detachOpeningEvents = exports.detachOpeningEvents = function detachOpeningEvents() {
return $(document).off("mouseleave." + this.name);
};
return module.exports;
},
5: function (require, module, exports) {
var extend, isArray, isObject, shouldDeepExtend;
isArray = function (target) {
return Array.isArray(target);
};
isObject = function (target) {
return target && Object.prototype.toString.call(target) === '[object Object]' || isArray(target);
};
shouldDeepExtend = function (options, target, parentKey) {
if (options.deep) {
if (options.notDeep) {
return !options.notDeep[target];
} else {
return true;
}
} else if (options.deepOnly) {
return options.deepOnly[target] || parentKey && shouldDeepExtend(options, parentKey);
}
};
module.exports = extend = function (options, target, sources, parentKey) {
var i, key, len, source, sourceValue, subTarget, targetValue;
if (!target || typeof target !== 'object' && typeof target !== 'function') {
target = {};
}
for ((i = 0, len = sources.length); i < len; i++) {
source = sources[i];
if (source != null) {
for (key in source) {
sourceValue = source[key];
targetValue = target[key];
if (sourceValue === target || sourceValue === void 0 || (sourceValue === null && !options.allowNull && !options.nullDeletes) || (options.keys && !options.keys[key]) || (options.notKeys && options.notKeys[key]) || (options.own && !source.hasOwnProperty(key)) || (options.globalFilter && !options.globalFilter(sourceValue, key, source)) || (options.filters && options.filters[key] && !options.filters[key](sourceValue, key, source))) {
continue;
}
if (sourceValue === null && options.nullDeletes) {
delete target[key];
continue;
}
if (options.globalTransform) {
sourceValue = options.globalTransform(sourceValue, key, source);
}
if (options.transforms && options.transforms[key]) {
sourceValue = options.transforms[key](sourceValue, key, source);
}
switch (false) {
case !(options.concat && isArray(sourceValue) && isArray(targetValue)):
target[key] = targetValue.concat(sourceValue);
break;
case !(shouldDeepExtend(options, key, parentKey) && isObject(sourceValue)):
subTarget = isObject(targetValue) ? targetValue : isArray(sourceValue) ? [] : {};
target[key] = extend(options, subTarget, [sourceValue], key);
break;
default:
target[key] = sourceValue;
}
}
}
}
return target;
};
return module.exports;
},
7: function (require, module, exports) {
var ref;
module.exports = {
isIE: document.all && !window.atob,
isIE11: window.navigator.msPointerEnabled,
isEdge: (/Edge/).test(((ref = window.navigator) != null ? ref.userAgent : void 0) || ''),
isMobile: document.documentElement.className.indexOf('mobile') !== -1
};
return module.exports;
}
}, this);
return require(0);
}).call(this, null, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : this);


//# sourceMappingURL=data:application/json;charset=utf-8;base64,